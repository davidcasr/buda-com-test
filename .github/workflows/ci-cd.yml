name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ================================
  # JOB 1: QUALITY CHECKS
  # ================================
  quality:
    name: 🔍 Verificación de Calidad
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐳 Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Construir imagen para testing
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: currency-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🖤 Verificar formato con Black
        run: |
          docker run --rm currency-api:test black --check app/ tests/

      - name: 📦 Verificar imports con isort
        run: |
          docker run --rm currency-api:test isort --check-only app/ tests/

      - name: 🔍 Verificar calidad con flake8
        run: |
          docker run --rm currency-api:test flake8 app/ tests/

      - name: 🏷️ Verificar tipos con mypy
        run: |
          docker run --rm currency-api:test mypy app/
        continue-on-error: true # mypy puede ser estricto, no fallar el build

  # ================================
  # JOB 2: TESTS
  # ================================
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐳 Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Construir imagen para testing
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: currency-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Ejecutar tests con cobertura
        run: |
          docker run --rm currency-api:test pytest --cov=app --cov-report=xml --cov-report=term

      - name: 📊 Subir cobertura a Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # ================================
  # JOB 3: SECURITY SCAN
  # ================================
  security:
    name: 🔒 Escaneo de Seguridad
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐳 Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Construir imagen para escaneo
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: currency-api:security
          cache-from: type=gha

      - name: 🔍 Escanear vulnerabilidades con Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "currency-api:security"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: 📤 Subir resultados de seguridad
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
        continue-on-error: true

  # ================================
  # JOB 4: BUILD & PUSH (solo en main)
  # ================================
  build-and-push:
    name: 🏗️ Build & Push
    runs-on: ubuntu-latest
    needs: [quality, test, security]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🐳 Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login a Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extraer metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build y Push imagen
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ================================
  # JOB 5: DEPLOY (solo en releases)
  # ================================
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4

      - name: 🚀 Deploy a producción
        run: |
          echo "🚀 Desplegando versión ${{ github.event.release.tag_name }}"
          echo "📦 Imagen: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}"
          # Aquí irían los comandos específicos de deploy
          # Por ejemplo: kubectl, docker-compose, etc.

      - name: ✅ Verificar deploy
        run: |
          echo "✅ Verificando que el servicio esté funcionando..."
          # Aquí irían las verificaciones post-deploy
          # Por ejemplo: health checks, smoke tests, etc.

  # ================================
  # JOB 6: NOTIFICATION
  # ================================
  notify:
    name: 📢 Notificaciones
    runs-on: ubuntu-latest
    needs: [quality, test, security, build-and-push]
    if: always()

    steps:
      - name: 📢 Notificar resultado
        run: |
          if [[ "${{ needs.quality.result }}" == "success" && "${{ needs.test.result }}" == "success" ]]; then
            echo "✅ Pipeline completado exitosamente"
          else
            echo "❌ Pipeline falló"
            exit 1
          fi
